type tokens = big_map<address, nat>;

type allowances = big_map<[address, address], nat>;

export type storage = // @layout comb { tokens, allowances, total_amount: nat };

export type transfer =
// @layout comb
{ // @annot from  from_: address, // @annot to to_: address, value: nat };

export type approve = // @layout comb    { spender: address, value: nat };

type getAllowance =
// @layout comb
{ owner: address, spender: address, callback: contract<nat> };

type getBalance = // @layout comb    { owner: address, callback: contract<nat> };

type getTotalSupply = // @layout comb   { callback: contract<nat> };

export type action =
    // @layout comb
    | ["TransferFA12", transfer]
    | ["Approve", approve]
    | ["GetAllowance", getAllowance]
    | ["GetBalance", getBalance]
    | ["GetTotalSupply", getTotalSupply];

const getAllowances = ([p, s]: [transfer, storage]): allowances => {
    if (Tezos.get_source() == p.from_) return s.allowances;
    let authorized_value =
        match(
            Big_map.find_opt([Tezos.get_source(), p.from_], s.allowances),
            { Some: (value: nat) => value, None: () => 0 as nat }
        );
    if (authorized_value < p.value) return failwith("Not Enough Allowance");
    return Big_map.update(
        [Tezos.get_source(), p.from_],
        Some(abs(authorized_value - p.value)),
        s.allowances
    )
};

const transfer = ([p, s]: [transfer, storage]): [list<operation>, storage] => {
    let new_allowances = getAllowances([p, s]);
    let sender_balance =
        match(
            Big_map.find_opt(p.from_, s.tokens),
            { Some: (value: nat) => value, None: () => 0 as nat }
        );
    if (sender_balance < p.value) return failwith("Not Enough Balance");
    let new_tokens_map =
        Big_map.update(p.from_, Some(abs(sender_balance - p.value)), s.tokens);
    let receiver_balance =
        match(
            Big_map.find_opt(p.to_, s.tokens),
            { Some: (value: nat) => value, None: () => 0 as nat }
        );
    let new_new_tokens_map =
        Big_map.update(p.to_, Some(receiver_balance + p.value), new_tokens_map);
    return [
        list([]) as list<operation>,
        { ...s, tokens: new_new_tokens_map, allowances: new_allowances }
    ]
};

const approve = ([p, s]: [approve, storage]): [list<operation>, storage] => {
    let previous_value =
        match(
            Big_map.find_opt([p.spender, Tezos.get_source()], s.allowances),
            { Some: (value: nat) => value, None: () => 0 as nat }
        );
    if (previous_value > (0 as nat) && p.value > (0 as nat)) return failwith(
        "Unsafe Allowance Change"
    );
    let new_allowances =
        Big_map.update(
            [p.spender, Tezos.get_source()],
            Some(p.value),
            s.allowances
        );
    return [list([]) as list<operation>, { ...s, allowances: new_allowances }]
};

const getAllowance = ([p, s]: [getAllowance, storage])
    : [list<operation>, storage] => {
    let value =
        match(
            Big_map.find_opt([p.owner, p.spender], s.allowances),
            { Some: (value: nat) => value, None: () => 0 as nat }
        );
    let op = Tezos.transaction(value, 0 as mutez, p.callback);
    return [list([op]), s]
};

const getBalance = ([p, s]: [getBalance, storage]): [list<operation>, storage] => {
    let value =
        match(
            Big_map.find_opt(p.owner, s.tokens),
            { Some: (value: nat) => value, None: () => 0 as nat }
        );
    let op = Tezos.transaction(value, 0 as mutez, p.callback);
    return [list([op]), s]
};

const getTotalSupply = ([p, s]: [getTotalSupply, storage])
    : [list<operation>, storage] => {
    let total = s.total_amount;
    let op = Tezos.transaction(total, 0 as mutez, p.callback);
    return [list([op]), s]
};

export const main = ([a, s]: [action, storage]): [list<operation>, storage] => {
    return match(
        a,
        {
            TransferFA12: (p: transfer) => transfer([p, s]),
            Approve: (p: approve) => approve([p, s]),
            GetAllowance: (p: getAllowance) => getAllowance([p, s]),
            GetBalance: (p: getBalance) => getBalance([p, s]),
            GetTotalSupply: (p: getTotalSupply) => getTotalSupply([p, s])
        }
    )
};